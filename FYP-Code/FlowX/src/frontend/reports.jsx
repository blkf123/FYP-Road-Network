import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom'; // Add this import
import styles from '../css/reports.module.css';
import { FaFilePdf, FaRoad, FaTimes, FaCheck, FaDownload, FaTrash } from 'react-icons/fa';
import { FaArrowLeftLong } from "react-icons/fa6"; // Add this import
import Navbar from './navbar';
import { useReportsController, useStandardReportController, useViewReportsController, useTrafficAnalysisController } from '../components/reports';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import 'chartjs-adapter-date-fns'; // Add this import
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const Reports = () => {
    const navigate = useNavigate(); // Add this line
    const {
        selectedReport,
        setSelectedReport,
        reportTypes,
        userRole
    } = useReportsController();

    const renderReportContent = () => {
        // Check if user has access to the selected report type
        if (selectedReport && selectedReport !== 'standard' && 
            userRole !== 'system_admin' && userRole !== 'traffic_analyst') {
            return (
                <div className={styles.welcomeMessage}>
                    <h3>Access Denied</h3>
                    <p>You don't have permission to view this report type.</p>
                </div>
            );
        }

        switch(selectedReport) {
            case 'standard':
                return <StandardReport />;
            case 'view-reports':
                return <ViewReports />;  // New component
            case 'traffic-analysis':
                return <TrafficAnalysis />;
            default:
                return (
                    <div className={styles.welcomeMessage}>
                        <h3>Welcome to Reports</h3>
                        <p>Please select a report type from the menu to get started</p>
                    </div>
                );
        }
    };

    const ViewReports = () => {
        // Remove message state
        // const [message, setMessage] = useState(null);
        
        const {
            reports,
            searchTerm,
            setSearchTerm,
            reportType,
            setReportType,
            isLoading,
            selectedReport,
            handleSelectReport,
            handleDownload,
            handleDelete,
            reportContent,
            isLoadingContent,
            formatColumnName,
            renderReportContent,
            setSelectedReport  // Add this to the destructured values
        } = useViewReportsController();

        const handleDownloadWithMessage = async (report) => {
            try {
                await handleDownload(report);
                toast.success('Report downloaded successfully');
            } catch (error) {
                toast.error(error.message);
            }
        };

        const handleDeleteAndRefresh = async (reportId) => {
            const success = await handleDelete(reportId);
            if (success) {
                // Reset selected report to null to return to initial view
                setSelectedReport(null);
            }
        };

        // This function should be completely removed

        const renderContent = () => {
            const content = renderReportContent(reportContent, selectedReport, isLoadingContent, formatColumnName);

            switch (content.type) {
                case 'loading':
                    return <div className={styles.message}>Loading report content...</div>;
                
                case 'empty':
                    return <div className={styles.message}>Select a report to view its contents</div>;
                
                case 'pdf':
                    return (
                        <div className={styles.pdfViewer}>
                            <iframe
                                src={content.url}
                                width="100%"
                                height="100%"
                                title="Report PDF"
                                className={styles.pdfFrame}
                            />
                        </div>
                    );
                
                case 'data':
                    return (
                        <div className={styles.reportDetails}>
                            <div className={styles.reportMetadata}>
                                <h4>{content.metadata.reportType} Report</h4>
                                <p>Generated by: {content.metadata.generatedBy}</p>
                                <p>Generated at: {content.metadata.generatedAt}</p>
                            </div>

                            <div className={styles.reportFilters}>
                                <h5>Filters Applied</h5>
                                {content.filters.dateRange && (
                                    <p>Date Range: {content.filters.dateRange.start} to {content.filters.dateRange.end}</p>
                                )}
                                {content.filters.timeRange && (
                                    <p>Time Range: {content.filters.timeRange.start} to {content.filters.timeRange.end}</p>
                                )}
                                {content.filters.selectedRoads && (
                                    <div className={styles.selectedRoads}>
                                        <p>Selected Roads:</p>
                                        <div className={styles.roadsList}>
                                            {content.filters.selectedRoads.map((road, index) => (
                                                <span key={index} className={styles.roadItem}>{road}</span>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>

                            <div className={styles.reportData}>
                                <div className={styles.previewTable}>
                                    <table>
                                        <thead>
                                            <tr>
                                                {content.columns.map((column, index) => (
                                                    <th key={index}>{formatColumnName(column)}</th>
                                                ))}
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {content.data.map((row, rowIndex) => (
                                                <tr key={rowIndex}>
                                                    {content.columns.map((column, colIndex) => (
                                                        <td key={`${rowIndex}-${colIndex}`}>
                                                            {row[column]}
                                                        </td>
                                                    ))}
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    );
                
                default:
                    return null;
            }
        };

        return (
            <div className={styles.reportContent}>
                <div className={styles.standardReportContainer}>
                    {/* Reports List Panel */}
                    <div className={styles.reportsListPanel}>
                        {/* Show message if exists */}
                        {/* Remove the message div here */}
                        
                        <h3>Generated Reports</h3>
                        <div className={styles.reportsFilter}>
                            <input 
                                type="text" 
                                placeholder="Search reports..." 
                                className={styles.filterInput}
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                            <select 
                                className={styles.filterSelect}
                                value={reportType}
                                onChange={(e) => setReportType(e.target.value)}
                            >
                                <option value="all">All Types</option>
                                <option value="traffic">Traffic Flow</option>
                                <option value="incidents">Incidents</option>
                                <option value="congestion">Congestion</option>
                                <option value="comprehensive">Comprehensive</option>
                            </select>
                        </div>

                        <div className={styles.reportsList}>
                            {isLoading ? (
                                <div className={styles.message}>Loading reports...</div>
                            ) : reports.length === 0 ? (
                                <div className={styles.message}>No reports found</div>
                            ) : (
                                reports.map((report) => (
                                    <div 
                                        key={report._id} 
                                        className={`${styles.reportItem} ${selectedReport?._id === report._id ? styles.selected : ''}`}
                                        onClick={() => handleSelectReport(report)}
                                    >
                                        <div className={styles.reportInfo}>
                                            <h4>{report.dataType} Report</h4>
                                            <p>Generated on {report.metadata.generatedAt}</p>
                                            <p>By {report.metadata.generatedBy}</p>
                                            <span className={styles.reportType}>
                                                {report.reportFormat.toUpperCase()}
                                            </span>
                                        </div>
                                        <div className={styles.reportActions}>
                                            <button 
                                                className={styles.actionButton}
                                                onClick={() => handleDownloadWithMessage(report)}
                                            >
                                                <FaDownload /> Download
                                            </button>
                                            <button 
                                                className={styles.actionButton}
                                                onClick={() => handleDeleteAndRefresh(report._id)} // Update this line
                                            >
                                                <FaTrash /> Delete
                                            </button>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>

                    {/* Report Preview Panel */}
                    <div className={styles.reportPreviewPanel}>
                        <h3>Report Content</h3>
                        {renderContent()}
                    </div>
                </div>
            </div>
        );
    };

    const TrafficAnalysis = () => {
        const {
            selectedRoads,
            showRoadSelector,
            setShowRoadSelector,
            searchTerm,
            setSearchTerm,
            analysisDate,
            setAnalysisDate,
            timeRange,
            setTimeRange,
            metric,
            setMetric,
            chartData,
            isLoading,
            error,
            handleRoadToggle,
            getFilteredRoads,
            fetchAnalysisData,
            availableRanges,
            clearAll,
        } = useTrafficAnalysisController();

        const handleRoadSelect = () => {
            if (selectedRoads.length >= 5) {
                toast.warning('Maximum 5 roads can be selected');
                return;
            }
            setShowRoadSelector(true);
        };

        const filteredRoads = getFilteredRoads();

        // Add this debug function
        const debugChartData = (data) => {
            console.log('Raw Chart Data:', data);
            if (data?.data) {
                const sampleRoad = Object.keys(data.data)[0];
                console.log('Sample Road Data:', {
                    road: sampleRoad,
                    times: data.data[sampleRoad]?.times?.length,
                    values: data.data[sampleRoad]?.values?.length
                });
            }
        };

        const renderChart = () => {
            // Debug logging
            console.log('Raw Chart Data:', chartData);
            
            if (!chartData || !chartData.data) {
                console.log('No chart data available');
                return <p>No data available</p>;
            }

            try {
                // Process the data
                const roads = Object.keys(chartData.data);
                if (roads.length === 0) {
                    return <p>No roads data available</p>;
                }

                // Get data points
                const firstRoad = chartData.data[roads[0]];
                console.log('First road data:', firstRoad);

                // Check if data format is correct
                if (!Array.isArray(firstRoad?.times) || !Array.isArray(firstRoad?.values)) {
                    console.error('Invalid data format:', firstRoad);
                    return <p>Invalid data format received from server</p>;
                }

                // Check if we have any data points
                if (firstRoad.times.length === 0 || firstRoad.values.length === 0) {
                    toast.warning('No data points available for the selected time range');
                    return <p>No data points available for the selected time range</p>;
                }

                // Create data points array
                const dataPoints = firstRoad.times.map((time, index) => {
                    const point = { time };
                    roads.forEach(road => {
                        const roadData = chartData.data[road];
                        if (roadData && Array.isArray(roadData.values)) {
                            point[road] = parseFloat(roadData.values[index]) || 0;
                        }
                    });
                    return point;
                });

                console.log('Processed data points:', dataPoints);

                // Return chart only if we have data
                if (dataPoints.length === 0) {
                    return <p>No data points available</p>;
                }

                return (
                    <div style={{ width: '100%', height: '500px', position: 'relative' }}>
                        <ResponsiveContainer width="100%" height="100%">
                            <LineChart 
                                data={dataPoints}
                                margin={{ top: 20, right: 30, left: 20, bottom: 70 }}
                            >
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis 
                                    dataKey="time"
                                    angle={-45}
                                    textAnchor="end"
                                    height={80}
                                    interval={0}
                                />
                                <YAxis 
                                    label={{ 
                                        value: getYAxisLabel(), 
                                        angle: -90, 
                                        position: 'insideLeft',
                                        offset: -5
                                    }} 
                                />
                                <Tooltip />
                                <Legend 
                                    verticalAlign="top"
                                    height={36}
                                    wrapperStyle={{ paddingBottom: '20px' }}
                                />
                                {roads.map((road, index) => (
                                    <Line
                                        key={road}
                                        type="monotone"
                                        dataKey={road}
                                        stroke={`hsl(${(index * 137.5) % 360}, 70%, 50%)`}
                                        strokeWidth={2}
                                        dot={true}
                                        name={road}
                                    />
                                ))}
                            </LineChart>
                        </ResponsiveContainer>
                    </div>
                );
            } catch (error) {
                console.error('Chart rendering error:', error);
                toast.error('Error rendering chart: ' + error.message);
                return <p>Error rendering chart</p>;
            }
        };

        const getYAxisLabel = () => {
            switch (metric) {
                case 'speed':
                    return 'Speed (km/h)';
                case 'incidents':
                    return 'Number of Incidents';
                case 'congestion':
                    return 'Congestion Level';
                default:
                    return '';
            }
        };

        return (
            <div className={styles.reportContent}>
                <div className={styles.standardReportContainer}>
                    {/* Filter Panel */}
                    <div className={styles.filterPanel}>
                        <h3>Analysis Settings</h3>
                        
                        <div className={styles.filterGroup}>
                            <label>
                                Date
                                <span className={styles.rangeHint}>
                                    (Available: {availableRanges.dateRange.start} to {availableRanges.dateRange.end})
                                </span>
                            </label>
                            <input
                                type="date"
                                className={styles.filterInput}
                                value={analysisDate}
                                onChange={(e) => setAnalysisDate(e.target.value)}
                                min={availableRanges.dateRange.start}
                                max={availableRanges.dateRange.end}
                            />
                        </div>

                        <div className={styles.filterGroup}>
                            <label>
                                Time Range
                                <span className={styles.rangeHint}>
                                    (Available: {availableRanges.timeRange.start} to {availableRanges.timeRange.end})
                                </span>
                            </label>
                            <div className={styles.dateInputs}>
                                <input
                                    type="time"
                                    className={styles.filterInput}
                                    value={timeRange.start}
                                    onChange={(e) => setTimeRange(prev => ({
                                        ...prev,
                                        start: e.target.value
                                    }))}
                                    min={availableRanges.timeRange.start}
                                    max={availableRanges.timeRange.end}
                                />
                                <span>to</span>
                                <input
                                    type="time"
                                    className={styles.filterInput}
                                    value={timeRange.end}
                                    onChange={(e) => setTimeRange(prev => ({
                                        ...prev,
                                        end: e.target.value
                                    }))}
                                    min={availableRanges.timeRange.start}
                                    max={availableRanges.timeRange.end}
                                />
                            </div>
                        </div>

                        <div className={styles.filterGroup}>
                            <label>Analysis Metric</label>
                            <select 
                                className={styles.filterSelect}
                                value={metric}
                                onChange={(e) => setMetric(e.target.value)}
                            >
                                <option value="speed">Average Speed</option>
                                <option value="congestion">Congestion Level</option>
                                <option value="incidents">Incident Frequency</option>
                            </select>
                        </div>

                        <div className={styles.filterGroup}>
                            <label>Compare Roads ({selectedRoads.length}/5)</label>
                            <button 
                                className={styles.roadSelectorButton}
                                onClick={handleRoadSelect}
                            >
                                <FaRoad /> Select Roads to Compare
                            </button>
                            {selectedRoads.length > 0 && (
                                <div className={styles.selectedRoadsList}>
                                    {selectedRoads.map(road => (
                                        <div key={road} className={styles.selectedRoadItem}>
                                            <span>{road}</span>
                                            <FaTimes 
                                                onClick={() => handleRoadToggle(road)}
                                                className={styles.removeRoadButton}
                                            />
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>

                        <div className={styles.buttonGroup}>
                            <button 
                                className={styles.generateButton}
                                onClick={fetchAnalysisData}
                                disabled={isLoading}
                            >
                                {isLoading ? 'Loading...' : 'Display'}
                            </button>
                            <button 
                                className={styles.clearButton}
                                onClick={clearAll}
                                disabled={isLoading}
                            >
                                Clear All
                            </button>
                        </div>

                        {/* Remove error display since we're using toast now */}
                        {/* {error && <div className={styles.errorMessage}>{error}</div>} */}
                    </div>

                    {/* Chart Panel */}
                    <div className={styles.chartPanel}>
                        <h3>Traffic Analysis</h3>
                        <div className={styles.chartContainer}>
                            {isLoading ? (
                                <div className={styles.loadingMessage}>Loading analysis...</div>
                            ) : error ? (
                                <div className={styles.errorMessage}>{error}</div>
                            ) : chartData ? (
                                <div style={{ width: '100%', height: '100%', minHeight: '500px' }}>
                                    {renderChart()}
                                </div>
                            ) : (
                                <p className={styles.placeholderText}>
                                    Select a date, time range, and roads to visualize traffic patterns
                                </p>
                            )}
                        </div>
                    </div>

                    {/* Road Selector Modal */}
                    {showRoadSelector && (
                        <div className={styles.modalOverlay}>
                            <div className={styles.roadSelectorModal}>
                                <div className={styles.modalHeader}>
                                    <h3>Select Roads</h3>
                                    <button 
                                        className={styles.closeButton}
                                        onClick={() => setShowRoadSelector(false)}
                                    >
                                        <FaTimes />
                                    </button>
                                </div>
                                
                                <div className={styles.searchBox}>
                                    <input
                                        type="text"
                                        placeholder="Search roads..."
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        className={styles.searchInput}
                                    />
                                </div>

                                <div className={styles.roadsList}>
                                    {filteredRoads.map(road => (
                                        <div 
                                            key={road}
                                            className={`${styles.roadItem} ${
                                                selectedRoads.includes(road) ? styles.selected : ''
                                            }`}
                                            onClick={() => handleRoadToggle(road)}
                                        >
                                            <span>{road}</span>
                                            {selectedRoads.includes(road) && (
                                                <FaCheck className={styles.checkIcon} />
                                            )}
                                        </div>
                                    ))}
                                </div>

                                <div className={styles.modalFooter}>
                                    <button 
                                        className={styles.confirmButton}
                                        onClick={() => setShowRoadSelector(false)}
                                    >
                                        Confirm Selection
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    return (
        <div className={styles.pageWrapper}>
            <ToastContainer
                position="top-right"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="light"
            />
            <button 
                className={styles.modernBackButton}
                onClick={() => navigate('/traffic-management')}
            >
                <FaArrowLeftLong className={styles.backArrow} />
                <span className={styles.backText}>Back to Traffic Management</span>
            </button>
            <h1 className={styles.title}>FlowX</h1>
            <Navbar sticky={false} />
            <div className={styles.pageContainer}>
                <h1 className={styles.title}>Reports Dashboard</h1>
                <p className={styles.pageTitle}>Generate and analyze traffic data reports</p>
                
                <div className={styles.mainContainer}>
                    {/* Simplified Menu Panel */}
                    <nav className={styles.menuPanel}>
                        {reportTypes.map(report => (
                            <div
                                key={report.id}
                                className={`${styles.menuItem} ${selectedReport === report.id ? styles.active : ''}`}
                                onClick={() => setSelectedReport(report.id)}
                            >
                                <div className={styles.menuIcon}>{report.icon}</div>
                                <div className={styles.menuContent}>
                                    <h3>{report.title}</h3>
                                    <p>{report.description}</p>
                                </div>
                            </div>
                        ))}
                    </nav>

                    {/* Content Panel */}
                    <div className={styles.contentPanel}>
                        {renderReportContent()}
                    </div>
                </div>
            </div>
        </div>
    );
};

const StandardReport = () => {
    // Remove the message state
    // const [message, setMessage] = useState(null);
    
    const {
        dateRange,
        setDateRange,
        timeRange,
        setTimeRange,
        selectedRoads,
        setSelectedRoads,
        dataType,
        setDataType,
        showRoadSelector,
        setShowRoadSelector,
        searchTerm,
        setSearchTerm,
        isGenerating,
        handleRoadToggle,
        handleGenerateReport,
        getFilteredRoads,
        availableRanges,
        previewData,
        formatColumnName,  // Add this to destructuring
        generatePreview
    } = useStandardReportController();

    const filteredRoads = getFilteredRoads();

    const renderPreviewContent = () => {
        if (!previewData) {
            return (
                <p className={styles.message}>
                    Configure your report settings to see a preview
                </p>
            );
        }

        return (
            <div className={styles.previewTable}>
                <table>
                    <thead>
                        <tr>
                            {previewData.columns.map((column, index) => (
                                <th key={index}>{formatColumnName(column)}</th>
                            ))}
                        </tr>
                    </thead>
                    <tbody>
                        {/* Remove the slice(0, 5) to show all records */}
                        {previewData.data.map((row, rowIndex) => (
                            <tr key={rowIndex}>
                                {previewData.columns.map((column, colIndex) => (
                                    <td key={`${rowIndex}-${colIndex}`}>
                                        {row[column]}
                                    </td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
                <p className={styles.previewNote}>
                    Showing preview of {previewData.data.length} records
                </p>
            </div>
        );
    };

    // Update the useEffect that calls generatePreview
    useEffect(() => {
        const debounceTimer = setTimeout(async () => {
            if (dateRange.start || dateRange.end || timeRange.start || timeRange.end || selectedRoads.length > 0) {
                try {
                    await generatePreview();
                } catch (error) {
                    // Only show toast, prevent error from propagating to console
                    toast.error(error.message);
                }
            }
        }, 500);

        return () => clearTimeout(debounceTimer);
    }, [dateRange, timeRange, selectedRoads, dataType, generatePreview]);

    return (
        <div className={styles.reportContent}>
            <div className={styles.standardReportContainer}>
                <div className={styles.filterPanel}>
                    {/* Show message if exists */}
                    {/* Remove the message div here */}
                    
                    <h3>Report Settings</h3>
                    <p className={styles.filterNote}>
                        Select any combination of filters to generate your report. 
                        At least one filter is required.
                    </p>
                    
                    <div className={styles.filterGroup}>
                        <label>
                            Date Range 
                            <span className={styles.rangeHint}>
                                (Available: {availableRanges.dateRange.start} to {availableRanges.dateRange.end})
                            </span>
                        </label>
                        <div className={styles.dateInputs}>
                            <input
                                type="date"
                                value={dateRange.start}
                                onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.dateRange.start}
                                max={availableRanges.dateRange.end}
                            />
                            <span>to</span>
                            <input
                                type="date"
                                value={dateRange.end}
                                onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.dateRange.start}
                                max={availableRanges.dateRange.end}
                            />
                        </div>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>
                            Time Range
                            <span className={styles.rangeHint}>
                                (Available: {availableRanges.timeRange.start} to {availableRanges.timeRange.end})
                            </span>
                        </label>
                        <div className={styles.dateInputs}>
                            <input
                                type="time"
                                value={timeRange.start}
                                onChange={(e) => setTimeRange({ ...timeRange, start: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.timeRange.start}
                                max={availableRanges.timeRange.end}
                            />
                            <span>to</span>
                            <input
                                type="time"
                                value={timeRange.end}
                                onChange={(e) => setTimeRange({ ...timeRange, end: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.timeRange.start}
                                max={availableRanges.timeRange.end}
                            />
                        </div>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>Data Type</label>
                        <select 
                            value={dataType}
                            onChange={(e) => setDataType(e.target.value)}
                            className={styles.filterSelect}
                        >
                            <option value="traffic">Traffic Flow</option>
                            <option value="incidents">Incidents</option>
                            <option value="congestion">Congestion Levels</option>
                            <option value="comprehensive">Comprehensive Report</option>
                        </select>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>Selected Roads ({selectedRoads.length})</label>
                        <button 
                            className={styles.roadSelectorButton}
                            onClick={() => setShowRoadSelector(true)}
                        >
                            <FaRoad /> Select Roads
                        </button>
                        {selectedRoads.length > 0 && (
                            <div className={styles.selectedRoadsList}>
                                {selectedRoads.map(road => (
                                    <div key={road} className={styles.selectedRoadItem}>
                                        <span>{road}</span>
                                        <FaTimes 
                                            onClick={() => handleRoadToggle(road)}
                                            className={styles.removeRoadButton}
                                        />
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    <button 
                        className={styles.generateButton}
                        onClick={handleGenerateReport}
                        disabled={isGenerating}
                    >
                        {isGenerating ? 'Generating...' : 'Generate Report'}
                    </button>
                </div>

                {/* Road Selector Modal */}
                {showRoadSelector && (
                    <div className={styles.modalOverlay}>
                        <div className={styles.roadSelectorModal}>
                            <div className={styles.modalHeader}>
                                <h3>Select Roads</h3>
                                <button 
                                    className={styles.closeButton}
                                    onClick={() => setShowRoadSelector(false)}
                                >
                                    <FaTimes />
                                </button>
                            </div>
                            
                            <div className={styles.searchBox}>
                                <input
                                    type="text"
                                    placeholder="Search roads..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className={styles.searchInput}
                                />
                            </div>

                            <div className={styles.roadsList}>
                                {filteredRoads.map(road => (
                                    <div 
                                        key={road}
                                        className={`${styles.roadItem} ${
                                            selectedRoads.includes(road) ? styles.selected : ''
                                        }`}
                                        onClick={() => handleRoadToggle(road)}
                                    >
                                        <span>{road}</span>
                                        {selectedRoads.includes(road) && (
                                            <FaCheck className={styles.checkIcon} />
                                        )}
                                    </div>
                                ))}
                            </div>

                            <div className={styles.modalFooter}>
                                <button 
                                    className={styles.confirmButton}
                                    onClick={() => setShowRoadSelector(false)}
                                >
                                    Confirm Selection
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                <div className={styles.previewPanel}>
                    <h3>Report Preview</h3>
                    <div className={styles.previewContent}>
                        {renderPreviewContent()}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Reports;