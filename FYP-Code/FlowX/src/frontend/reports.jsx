import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom'; // Add this import
import styles from '../css/reports.module.css';
import { FaFilePdf, FaRoad, FaTimes, FaCheck, FaDownload, FaTrash } from 'react-icons/fa';
import Navbar from './navbar';
import { useReportsController, useStandardReportController, useViewReportsController } from '../components/reports';

const Reports = () => {
    const navigate = useNavigate(); // Add this line
    const {
        selectedReport,
        setSelectedReport,
        reportTypes
    } = useReportsController();

    const renderReportContent = () => {
        switch(selectedReport) {
            case 'standard':
                return <StandardReport />;
            case 'view-reports':
                return <ViewReports />;  // New component
            case 'traffic-analysis':
                return <TrafficAnalysis />;
            case 'congestion':
                return <CongestionReport />;
            default:
                return (
                    <div className={styles.welcomeMessage}>
                        <h3>Welcome to Reports</h3>
                        <p>Please select a report type from the menu to get started</p>
                    </div>
                );
        }
    };

    const ViewReports = () => {
        const [message, setMessage] = useState(null);
        
        const {
            reports,
            searchTerm,
            setSearchTerm,
            reportType,
            setReportType,
            isLoading,
            selectedReport,
            handleSelectReport,
            handleDownload,
            handleDelete,
            reportContent,
            isLoadingContent,
            formatColumnName,
            renderReportContent
        } = useViewReportsController();

        const handleDownloadWithMessage = async (report) => {
            try {
                setMessage(null);
                await handleDownload(report);
                setMessage({ type: 'success', text: 'Report downloaded successfully' });
            } catch (error) {
                setMessage({ type: 'error', text: error.message });
            }
        };

        const handleDeleteWithMessage = async (reportId) => {
            try {
                setMessage(null);
                await handleDelete(reportId);
                setMessage({ type: 'success', text: 'Report deleted successfully' });
            } catch (error) {
                setMessage({ type: 'error', text: error.message });
            }
        };

        const renderContent = () => {
            const content = renderReportContent(reportContent, selectedReport, isLoadingContent, formatColumnName);

            switch (content.type) {
                case 'loading':
                    return <div className={styles.message}>Loading report content...</div>;
                
                case 'empty':
                    return <div className={styles.message}>Select a report to view its contents</div>;
                
                case 'pdf':
                    return (
                        <div className={styles.pdfViewer}>
                            <iframe
                                src={content.url}
                                width="100%"
                                height="100%"
                                title="Report PDF"
                                className={styles.pdfFrame}
                            />
                        </div>
                    );
                
                case 'data':
                    return (
                        <div className={styles.reportDetails}>
                            <div className={styles.reportMetadata}>
                                <h4>{content.metadata.reportType} Report</h4>
                                <p>Generated by: {content.metadata.generatedBy}</p>
                                <p>Generated at: {content.metadata.generatedAt}</p>
                            </div>

                            <div className={styles.reportFilters}>
                                <h5>Filters Applied</h5>
                                {content.filters.dateRange && (
                                    <p>Date Range: {content.filters.dateRange.start} to {content.filters.dateRange.end}</p>
                                )}
                                {content.filters.timeRange && (
                                    <p>Time Range: {content.filters.timeRange.start} to {content.filters.timeRange.end}</p>
                                )}
                                {content.filters.selectedRoads && (
                                    <div className={styles.selectedRoads}>
                                        <p>Selected Roads:</p>
                                        <div className={styles.roadsList}>
                                            {content.filters.selectedRoads.map((road, index) => (
                                                <span key={index} className={styles.roadItem}>{road}</span>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>

                            <div className={styles.reportData}>
                                <div className={styles.previewTable}>
                                    <table>
                                        <thead>
                                            <tr>
                                                {content.columns.map((column, index) => (
                                                    <th key={index}>{formatColumnName(column)}</th>
                                                ))}
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {content.data.map((row, rowIndex) => (
                                                <tr key={rowIndex}>
                                                    {content.columns.map((column, colIndex) => (
                                                        <td key={`${rowIndex}-${colIndex}`}>
                                                            {row[column]}
                                                        </td>
                                                    ))}
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    );
                
                default:
                    return null;
            }
        };

        return (
            <div className={styles.reportContent}>
                <div className={styles.standardReportContainer}>
                    {/* Reports List Panel */}
                    <div className={styles.reportsListPanel}>
                        {/* Show message if exists */}
                        {message && (
                            <div className={message.type === 'success' ? styles.successMessage : styles.errorMessage}>
                                {message.text}
                            </div>
                        )}
                        
                        <h3>Generated Reports</h3>
                        <div className={styles.reportsFilter}>
                            <input 
                                type="text" 
                                placeholder="Search reports..." 
                                className={styles.filterInput}
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                            <select 
                                className={styles.filterSelect}
                                value={reportType}
                                onChange={(e) => setReportType(e.target.value)}
                            >
                                <option value="all">All Types</option>
                                <option value="traffic">Traffic Flow</option>
                                <option value="incidents">Incidents</option>
                                <option value="congestion">Congestion</option>
                                <option value="comprehensive">Comprehensive</option>
                            </select>
                        </div>

                        <div className={styles.reportsList}>
                            {isLoading ? (
                                <div className={styles.message}>Loading reports...</div>
                            ) : reports.length === 0 ? (
                                <div className={styles.message}>No reports found</div>
                            ) : (
                                reports.map((report) => (
                                    <div 
                                        key={report._id} 
                                        className={`${styles.reportItem} ${selectedReport?._id === report._id ? styles.selected : ''}`}
                                        onClick={() => handleSelectReport(report)}
                                    >
                                        <div className={styles.reportInfo}>
                                            <h4>{report.dataType} Report</h4>
                                            <p>Generated on {report.metadata.generatedAt}</p>
                                            <p>By {report.metadata.generatedBy}</p>
                                            <span className={styles.reportType}>
                                                {report.reportFormat.toUpperCase()}
                                            </span>
                                        </div>
                                        <div className={styles.reportActions}>
                                            <button 
                                                className={styles.actionButton}
                                                onClick={() => handleDownloadWithMessage(report)}
                                            >
                                                <FaDownload /> Download
                                            </button>
                                            <button 
                                                className={styles.actionButton}
                                                onClick={() => handleDeleteWithMessage(report._id)}
                                            >
                                                <FaTrash /> Delete
                                            </button>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>

                    {/* Report Preview Panel */}
                    <div className={styles.reportPreviewPanel}>
                        <h3>Report Content</h3>
                        {renderContent()}
                    </div>
                </div>
            </div>
        );
    };

    const TrafficAnalysis = () => {
        return (
            <div className={styles.reportContent}>
                <div className={styles.standardReportContainer}>
                    {/* Filter Panel */}
                    <div className={styles.filterPanel}>
                        <h3>Analysis Settings</h3>
                        <p className={styles.filterNote}>
                            Select a date and roads to compare traffic patterns
                        </p>

                        <div className={styles.filterGroup}>
                            <label>Date</label>
                            <input
                                type="date"
                                className={styles.filterInput}
                                style={{ width: '100%' }}
                            />
                        </div>

                        <div className={styles.filterGroup}>
                            <label>Time Range</label>
                            <div className={styles.dateInputs}>
                                <input
                                    type="time"
                                    className={styles.filterInput}
                                />
                                <span>to</span>
                                <input
                                    type="time"
                                    className={styles.filterInput}
                                />
                            </div>
                        </div>

                        <div className={styles.filterGroup}>
                            <label>Analysis Type</label>
                            <select className={styles.filterSelect}>
                                <option value="speed">Average Speed</option>
                                <option value="congestion">Congestion Level</option>
                                <option value="incidents">Incident Frequency</option>
                            </select>
                        </div>

                        <div className={styles.filterGroup}>
                            <label>Compare Roads</label>
                            <button className={styles.roadSelectorButton}>
                                <FaRoad /> Select Roads to Compare
                            </button>
                            {/* Selected roads list will go here */}
                            <div className={styles.selectedRoadsNote}>
                                Select up to 5 roads to compare their traffic patterns
                            </div>
                        </div>

                        <button className={styles.generateButton}>
                            Update Analysis
                        </button>
                    </div>

                    {/* Chart Panel */}
                    <div className={styles.chartPanel}>
                        <h3>Traffic Analysis</h3>
                        <div className={styles.chartContainer}>
                            <p className={styles.placeholderText}>
                                Select a date and roads to visualize traffic patterns
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    const CongestionReport = () => (
        <div className={styles.reportContent}>
            <h2>Congestion Report</h2>
            <p>Congestion analysis will be implemented here</p>
        </div>
    );

    return (
        <div className={styles.pageWrapper}>
            <button 
                className={styles.modernBackButton}
                onClick={() => navigate('/traffic-management')}
            >
                <span className={styles.backArrow}>←</span>
                <span className={styles.backText}>Back to Traffic Management</span>
            </button>
            <h1 className={styles.title}>FlowX</h1>
            <Navbar sticky={false} />
            <div className={styles.pageContainer}>
                <h1 className={styles.title}>Reports Dashboard</h1>
                <p className={styles.pageTitle}>Generate and analyze traffic data reports</p>
                
                <div className={styles.mainContainer}>
                    {/* Simplified Menu Panel */}
                    <nav className={styles.menuPanel}>
                        {reportTypes.map(report => (
                            <div
                                key={report.id}
                                className={`${styles.menuItem} ${selectedReport === report.id ? styles.active : ''}`}
                                onClick={() => setSelectedReport(report.id)}
                            >
                                <div className={styles.menuIcon}>{report.icon}</div>
                                <div className={styles.menuContent}>
                                    <h3>{report.title}</h3>
                                    <p>{report.description}</p>
                                </div>
                            </div>
                        ))}
                    </nav>

                    {/* Content Panel */}
                    <div className={styles.contentPanel}>
                        {renderReportContent()}
                    </div>
                </div>
            </div>
        </div>
    );
};

const StandardReport = () => {
    const [message, setMessage] = useState(null);
    
    const {
        dateRange,
        setDateRange,
        timeRange,
        setTimeRange,
        selectedRoads,
        setSelectedRoads,
        dataType,
        setDataType,
        showRoadSelector,
        setShowRoadSelector,
        searchTerm,
        setSearchTerm,
        isGenerating,
        handleRoadToggle,
        handleGenerateReport,
        getFilteredRoads,
        availableRanges,
        previewData,
        formatColumnName  // Add this to destructuring
    } = useStandardReportController();

    const validateFilters = () => {
        const hasDateRange = dateRange.start || dateRange.end;
        const hasTimeRange = timeRange.start || timeRange.end;
        const hasRoads = selectedRoads.length > 0;

        if (!hasDateRange && !hasTimeRange && !hasRoads) {
            setMessage({ type: 'error', text: 'Please provide at least one filter (Date, Time, or Roads)' });
            return false;
        }
        return true;
    };

    const handleGenerateReportWithMessage = async () => {
        try {
            setMessage(null);
            
            // First validate filters
            if (!validateFilters()) {
                return;
            }

            await handleGenerateReport();
            setMessage({ type: 'success', text: 'Report generated successfully' });
        } catch (error) {
            setMessage({ type: 'error', text: error.message });
        }
    };

    const filteredRoads = getFilteredRoads();

    const renderPreviewContent = () => {
        if (!previewData) {
            return (
                <p className={styles.message}>
                    Configure your report settings to see a preview
                </p>
            );
        }

        return (
            <div className={styles.previewTable}>
                <table>
                    <thead>
                        <tr>
                            {previewData.columns.map((column, index) => (
                                <th key={index}>{formatColumnName(column)}</th>
                            ))}
                        </tr>
                    </thead>
                    <tbody>
                        {/* Remove the slice(0, 5) to show all records */}
                        {previewData.data.map((row, rowIndex) => (
                            <tr key={rowIndex}>
                                {previewData.columns.map((column, colIndex) => (
                                    <td key={`${rowIndex}-${colIndex}`}>
                                        {row[column]}
                                    </td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
                <p className={styles.previewNote}>
                    Showing preview of {previewData.data.length} records
                </p>
            </div>
        );
    };

    return (
        <div className={styles.reportContent}>
            <div className={styles.standardReportContainer}>
                <div className={styles.filterPanel}>
                    {/* Show message if exists */}
                    {message && (
                        <div className={message.type === 'success' ? styles.successMessage : styles.errorMessage}>
                            {message.text}
                        </div>
                    )}
                    
                    <h3>Report Settings</h3>
                    <p className={styles.filterNote}>
                        Select any combination of filters to generate your report. 
                        At least one filter is required.
                    </p>
                    
                    <div className={styles.filterGroup}>
                        <label>
                            Date Range 
                            <span className={styles.rangeHint}>
                                (Available: {availableRanges.dateRange.start} to {availableRanges.dateRange.end})
                            </span>
                        </label>
                        <div className={styles.dateInputs}>
                            <input
                                type="date"
                                value={dateRange.start}
                                onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.dateRange.start}
                                max={availableRanges.dateRange.end}
                            />
                            <span>to</span>
                            <input
                                type="date"
                                value={dateRange.end}
                                onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.dateRange.start}
                                max={availableRanges.dateRange.end}
                            />
                        </div>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>
                            Time Range
                            <span className={styles.rangeHint}>
                                (Available: {availableRanges.timeRange.start} to {availableRanges.timeRange.end})
                            </span>
                        </label>
                        <div className={styles.dateInputs}>
                            <input
                                type="time"
                                value={timeRange.start}
                                onChange={(e) => setTimeRange({ ...timeRange, start: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.timeRange.start}
                                max={availableRanges.timeRange.end}
                            />
                            <span>to</span>
                            <input
                                type="time"
                                value={timeRange.end}
                                onChange={(e) => setTimeRange({ ...timeRange, end: e.target.value })}
                                className={styles.filterInput}
                                min={availableRanges.timeRange.start}
                                max={availableRanges.timeRange.end}
                            />
                        </div>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>Data Type</label>
                        <select 
                            value={dataType}
                            onChange={(e) => setDataType(e.target.value)}
                            className={styles.filterSelect}
                        >
                            <option value="traffic">Traffic Flow</option>
                            <option value="incidents">Incidents</option>
                            <option value="congestion">Congestion Levels</option>
                            <option value="comprehensive">Comprehensive Report</option>
                        </select>
                    </div>

                    <div className={styles.filterGroup}>
                        <label>Selected Roads ({selectedRoads.length})</label>
                        <button 
                            className={styles.roadSelectorButton}
                            onClick={() => setShowRoadSelector(true)}
                        >
                            <FaRoad /> Select Roads
                        </button>
                        {selectedRoads.length > 0 && (
                            <div className={styles.selectedRoadsList}>
                                {selectedRoads.map(road => (
                                    <div key={road} className={styles.selectedRoadItem}>
                                        <span>{road}</span>
                                        <FaTimes 
                                            onClick={() => handleRoadToggle(road)}
                                            className={styles.removeRoadButton}
                                        />
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    <button 
                        className={styles.generateButton}
                        onClick={handleGenerateReportWithMessage}
                        disabled={isGenerating}
                    >
                        {isGenerating ? 'Generating...' : 'Generate Report'}
                    </button>
                </div>

                {/* Road Selector Modal */}
                {showRoadSelector && (
                    <div className={styles.modalOverlay}>
                        <div className={styles.roadSelectorModal}>
                            <div className={styles.modalHeader}>
                                <h3>Select Roads</h3>
                                <button 
                                    className={styles.closeButton}
                                    onClick={() => setShowRoadSelector(false)}
                                >
                                    <FaTimes />
                                </button>
                            </div>
                            
                            <div className={styles.searchBox}>
                                <input
                                    type="text"
                                    placeholder="Search roads..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className={styles.searchInput}
                                />
                            </div>

                            <div className={styles.roadsList}>
                                {filteredRoads.map(road => (
                                    <div 
                                        key={road}
                                        className={`${styles.roadItem} ${
                                            selectedRoads.includes(road) ? styles.selected : ''
                                        }`}
                                        onClick={() => handleRoadToggle(road)}
                                    >
                                        <span>{road}</span>
                                        {selectedRoads.includes(road) && (
                                            <FaCheck className={styles.checkIcon} />
                                        )}
                                    </div>
                                ))}
                            </div>

                            <div className={styles.modalFooter}>
                                <button 
                                    className={styles.confirmButton}
                                    onClick={() => setShowRoadSelector(false)}
                                >
                                    Confirm Selection
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                <div className={styles.previewPanel}>
                    <h3>Report Preview</h3>
                    <div className={styles.previewContent}>
                        {renderPreviewContent()}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Reports;
